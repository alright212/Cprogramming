#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_NAME_LEN 20
#define MAX_COMPETITORS 100

typedef struct {
	char name[MAX_NAME_LEN];
	double result;
} competitor;

competitor competitors[MAX_COMPETITORS];
competitor top3[3];
competitor disqualified[MAX_COMPETITORS];

int read_competitors(competitor *competitors, int *n) {
	int i;
	if (scanf("%d", n) != 1) {
		return 0;
	}
	for (i = 0; i < *n; i++) {
		if (scanf("%s %lf", competitors[i].name, &competitors[i].result) != 2) {
			return 0;
		}
	}
	return 1;
}

void print_competitors(competitor *competitors, int n) {
	int i;
	for (i = 0; i < n; i++) {
		printf("%s\n", competitors[i].name);
	}
}

void sort_competitors(competitor *competitors, int n) {
	int i, j;
	competitor tmp;
	for (i = 0; i < n - 1; i++) {
		for (j = i + 1; j < n; j++) {
			if (competitors[i].result > competitors[j].result) {
				tmp = competitors[i];
				competitors[i] = competitors[j];
				competitors[j] = tmp;
			}
		}
	}
}

void print_top3(competitor *competitors, int n) {
	int i;
	for (i = 0; i < n; i++) {
		printf("%s %.1lf\n", competitors[i].name, competitors[i].result);
	}
}

void print_disqualified(competitor *competitors, int n) {
	int i;
	for (i = 0; i < n; i++) {
		printf("%s\n", competitors[i].name);
	}
}

int main() {
	int n, n_disqualified;
	int i, j, k;
	competitor tmp;
	
	if (!read_competitors(competitors, &n)) {
		return 1;
	}
	
	for (i = 0; i < 3; i++) {
		if (!read_competitors(competitors, &n)) {
			return 1;
		}
		sort_competitors(competitors, n);
		for (j = 0; j < n; j++) {
			for (k = 0; k < n; k++) {
				if (strcmp(competitors[j].name, competitors[k].name) == 0) {
					competitors[k].result = competitors[j].result;
				}
			}
		}
	}
	
	sort_competitors(competitors, n);
	
	for (i = 0; i < 3; i++) {
		top3[i] = competitors[i];
	}
	
	n_disqualified = 0;
	for (i = 3; i < n; i++) {
		if (competitors[i].result == 0) {
			disqualified[n_disqualified++] = competitors[i];
		}
	}
	
	printf("Konkurentide nimed:\n");
	print_competitors(competitors, n);
	printf("\n");
	printf("Kolm parimat:\n");
	print_top3(top3, 3);
	printf("\n");
	printf("Diskvalifitseeritud:\n");
	print_disqualified(disqualified, n_disqualified);
	printf("\n");
	
	return 0;
}
