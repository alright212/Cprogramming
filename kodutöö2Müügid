/*VARIANT 6: Müügid

On antud massiiv kaubagruppidest ja kahemõõtmeline massiiv (maatriks), mille ridadeks on kaupadega tehtud tehingute kogusumma ning veerud vastavad müüjatele, kes seda kaupa müüvad.

Koosta programm, mis väljastab summaarse info tehingute kohta ning edukaima müüja.

Lahenduses kasuta alamprogramme:

Lähteandmete lugemiseks.
Müügiinfo väljastamiseks ekraanile (vaata näidet)
Iga müüja tehingute summa arvutamiseks ja väljastamiseks (NB! Summeerida tuleb VEERGUDES olevaid andmeid).
Edukaima müüja leidmiseks ja väljastamiseks
Lähtefail on nimega 6a.txt*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void readData(char *filename, char *commodityGroups[], float transactions[][5]);
void displayData(char *commodityGroups[], float transactions[][5]);
void calculateSum(float transactions[][5], float sum[], int rows, int columns);
void findMostSuccessful(float sum[], int columns);

int main()
{
    char *commodityGroups[6];
    float transactions[6][5];
    float sum[5];

    readData("6a.txt", commodityGroups, transactions);
    displayData(commodityGroups, transactions);
    calculateSum(transactions, sum, 6, 5);
    findMostSuccessful(sum, 5);

    return 0;
}

void readData(char *filename, char *commodityGroups[], float transactions[][5])
{
    FILE *fp;
    int i, j;
    char line[100];
    char *token;

    fp = fopen(filename, "r");

    if (fp == NULL)
    {
        printf("Error opening file!\n");
        exit(1);
    }

    fgets(line, 100, fp);

    for (i = 0; i < 6; i++)
    {
        fgets(line, 100, fp);
        token = strtok(line, "\t");
        commodityGroups[i] = (char *)malloc(strlen(token) + 1);
        strcpy(commodityGroups[i], token);

        for (j = 0; j < 5; j++)
        {
            token = strtok(NULL, "\t");
            transactions[i][j] = atof(token);
        }
    }

    fclose(fp);
}

void displayData(char *commodityGroups[], float transactions[][5])
{
    int i, j;

    for (i = 0; i < 6; i++)
    {
        printf("%s\t", commodityGroups[i]);
        for (j = 0; j < 5; j++)
        {
            printf("%.2f\t", transactions[i][j]);
        }
        printf("\n");
    }
}

void calculateSum(float transactions[][5], float sum[], int rows, int columns)
{
    int i, j;

    for (i = 0; i < columns; i++)
    {
        sum[i] = 0;
        for (j = 0; j < rows; j++)
        {
            sum[i] += transactions[j][i];
        }
    }
}

void findMostSuccessful(float sum[], int columns)
{
    int i, maxIndex = 0;
    float max = sum[0];

    for (i = 1; i < columns; i++)
    {
        if (sum[i] > max)
        {
            max = sum[i];
            maxIndex = i;
        }
    }

    printf("Most successful seller: %d\n", maxIndex + 1);
}
