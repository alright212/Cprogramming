/*Teie ülesandeks on leida pikim substring (pikim alamosa sõnest), kus ei esine korduvaid tähti.
Suured ja väikesed tähed tuleb lugeda samaväärseteks (a == A) (tulemuses tuleb tagastada sõne tähed algsel kujul, st suur ja väike täht vastavalt).
Kui mitu alamsõnet on sama pikkusega, vali neist esimene.*/
#include <stdio.h>
#include <string.h>

void longestSubstring(char *string)
{
    int i, j, k, len, max, max_i, max_j;
    int count[26];
    int flag;
    len = strlen(string);
    max = 0;
    max_i = 0;
    max_j = 0;
    for (i = 0; i < len; i++)
    {
        for (j = i; j < len; j++)
        {
            memset(count, 0, sizeof(count));
            flag = 1;
            for (k = i; k <= j; k++)
            {
                if (string[k] >= 'a' && string[k] <= 'z')
                {
                    count[string[k] - 'a']++;
                    if (count[string[k] - 'a'] > 1)
                    {
                        flag = 0;
                        break;
                    }
                }
                else if (string[k] >= 'A' && string[k] <= 'Z')
                {
                    count[string[k] - 'A']++;
                    if (count[string[k] - 'A'] > 1)
                    {
                        flag = 0;
                        break;
                    }
                }
            }
            if (flag && j - i + 1 > max)
            {
                max = j - i + 1;
                max_i = i;
                max_j = j;
            }
        }
    }
    for (i = max_i; i <= max_j; i++)
    {
        printf("%c", string[i]);
    }
    printf("\n");
}

int main()
{
    char string[100];
    while (scanf("%s", string) != EOF)
    {
        longestSubstring(string);
    }
    return 0;
}
