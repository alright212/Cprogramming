/*VARIANT 1: Fotovõistlus

On antud kolm massiivi – fotode pealkirjad, osavõtjad ning hinnangud (tulemused on punktides).

Koosta programm, mis väljastab fotovõistlustel osalejate nimed, fotode arvu osaleja kohta ning esikolmiku. Esikolmiku leidmiseks arvestatakse iga osaleja parimat pilti.

Lahenduses kasuta alamprogramme:

Lähteandmete lugemiseks.
Võistlejate nimede ja nende parima tulemuse filtreerimiseks lähteandmetest.
Võistlejate nimede ja fotode arvu väljastamiseks.
Võistlejate järjestamiseks tulemuste põhjal
Esikolmiku väljastamiseks.
Lähtefail on nimega 1a.txt
17
Päikeseloojang	Juhan	93.5
Liivakast	Meelis	91.0
Mererand	Peeter	96.5
Kuu_ja_pilved	Juhan	96.5
Foori_taga	Teet	94.5
Baaris	Anti	97.0
Vaidlus	Anti	97.5
Kohvipaus	Peep	98.0
Reklaamitahvel	Meelis	99.0
Lumine_tänav	Teet	89.5
Vihmasadu	Teet	90.0
Märg_sillutis	Meelis	91.5
Lilleõis	Ats	90.5
Joomakaaslased	Anti	98.5
Kirsipuu_oks	Ats	94.5
Metsatukas	Peeter	94.0
Konserviavaja	Anti	88.0
*/
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define MAX_NAME_LENGTH 20
#define MAX_PARTICIPANTS 100

typedef struct {
	char name[MAX_NAME_LENGTH];
	int numberOfPhotos;
	float bestResult;
} Participant;

int readData(char *fileName, char names[][MAX_NAME_LENGTH], float results[], int *numberOfPhotos);
void filterData(char names[][MAX_NAME_LENGTH], float results[], int numberOfPhotos, Participant participants[]);
void printParticipants(Participant participants[]);
void sortParticipants(Participant participants[]);
void printTopThree(Participant participants[]);

int main(int argc, char *argv[]) {
	char names[MAX_PARTICIPANTS][MAX_NAME_LENGTH];
	float results[MAX_PARTICIPANTS];
	int numberOfPhotos;
	Participant participants[MAX_PARTICIPANTS];

	if (argc < 2) {
		printf("Usage: %s <fileName>\n", argv[0]);
		return 1;
	}

	if (readData(argv[1], names, results, &numberOfPhotos) != 0) {
		printf("Error reading data from file %s\n", argv[1]);
		return 1;
	}

	filterData(names, results, numberOfPhotos, participants);
	printParticipants(participants);
	sortParticipants(participants);
	printTopThree(participants);

	return 0;
}

int readData(char *fileName, char names[][MAX_NAME_LENGTH], float results[], int *numberOfPhotos) {
	FILE *file;
	int i;

	file = fopen(fileName, "r");
	if (file == NULL) {
		return 1;
	}

	fscanf(file, "%d", numberOfPhotos);

	for (i = 0; i < *numberOfPhotos; i++) {
		fscanf(file, "%s %f", names[i], &results[i]);
	}

	fclose(file);
	return 0;
}

void filterData(char names[][MAX_NAME_LENGTH], float results[], int numberOfPhotos, Participant participants[]) {
	int i, j, participantIndex;

	participantIndex = 0;
	for (i = 0; i < numberOfPhotos; i++) {
		for (j = 0; j < participantIndex; j++) {
			if (strcmp(names[i], participants[j].name) == 0) {
				break;
			}
		}

		if (j == participantIndex) {
			strcpy(participants[participantIndex].name, names[i]);
			participants[participantIndex].numberOfPhotos = 1;
			participants[participantIndex].bestResult = results[i];
			participantIndex++;
		} else {
			participants[j].numberOfPhotos++;
			if (results[i] > participants[j].bestResult) {
				participants[j].bestResult = results[i];
			}
		}
	}
}

void printParticipants(Participant participants[]) {
	int i;

	printf("Participants:\n");
	for (i = 0; i < MAX_PARTICIPANTS; i++) {
		if (participants[i].name[0] == '\0') {
			break;
		}

		printf("%s %d\n", participants[i].name, participants[i].numberOfPhotos);
	}
}

void sortParticipants(Participant participants[]) {
	int i, j;
	Participant temp;

	for (i = 0; i < MAX_PARTICIPANTS; i++) {
		if (participants[i].name[0] == '\0') {
			break;
		}

		for (j = i + 1; j < MAX_PARTICIPANTS; j++) {
			if (participants[j].name[0] == '\0') {
				break;
			}

			if (participants[i].bestResult < participants[j].bestResult) {
				temp = participants[i];
				participants[i] = participants[j];
				participants[j] = temp;
			}
		}
	}
}

void printTopThree(Participant participants[]) {
	int i;

	printf("Top three:\n");
	for (i = 0; i < 3; i++) {
		if (participants[i].name[0] == '\0') {
			break;
		}

		printf("%s %.1f\n", participants[i].name, participants[i].bestResult);
	}
}
